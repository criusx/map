"""
Django settings for server project.

Generated by 'django-admin startproject' using Django 2.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import os.path

import ldap

from django_auth_ldap.config import LDAPSearch, LDAPSearchUnion, GroupOfNamesType

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'dj=gnvi8(9ubzw4n4p1cir7o(%lno986#(6rimo6%f$3f-&(6d'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# TODO not a good idea, customize this
ALLOWED_HOSTS = ['localhost',
                 '*',
                 ]

# Application definition

INSTALLED_APPS = [
    'channels',
    'django_auth_ldap',
    'server.apps.heliosServer',
    'heliosSite.apps.heliosConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
]

# channels
ASGI_APPLICATION = 'server.routing.application'

# TODO is this needed? there's no process-process communication
'''
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            # "hosts": [('cbatch67046', 6379)],
            "hosts": [('localhost', 6379)],
        },
    },
}
'''

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    ]

ROOT_URLCONF = 'server.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

TEMPLATE_LOADERS = (
    'django.template.loaders.filesystem.load_template_source',
    'django.template.loaders.app_directories.load_template_source',
)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'verbose': {
            'format': '%(levelname)8s %(name)s.%(funcname)s:%(lineno)s- %(message)s'},
        'simple': {
            'format': '%(levelname)8s|%(message)s'}, },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue'}},
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.environ.get("LOG_FILE", 'logging.txt'),
            'formatter': 'simple', },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple', }},
    'loggers': {
        '': {
            'handlers': ['console', 'file'],
            'level': 'WARNING', },
        'django.channels': {
            'handlers': ['console'],
            'level': 'WARNING'},
        'asyncio': {
            'handlers': ['console'],
            'level': 'WARNING',
            'propagate': False},
        'helios': {
            'handlers': ['file', 'console'],
            'level': 'DEBUG',
            'propagate': False},
        'helios.auth': {
            'handlers': ['file', 'console'],
            'level': 'DEBUG',
            'propagate': False},
        'helios.view': {
            'handlers': ['file', 'console'],
            'level': 'DEBUG',
            'propagate': False},
        'helios.backend': {
            'level': 'DEBUG',
            'propagate': False, },
        'helios.backend.bpEndpoint': {
            'level': 'DEBUG', },
        'helios.backend.processors.branchTrainingHeatmap': {
            'level': 'WARNING'},
        'django.db.backends': {
            'level': 'INFO'},
        'django.utils.autoreload': {
            'level': 'INFO'},
        'django': {
            'handlers': ['file', 'console'],
            'level': 'DEBUG',
            'propagate': True}}}

WSGI_APPLICATION = 'server.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'helios',
        'USER': 'helios',
        'PASSWORD': 'heliosPwd',
        'HOST': 'localhost',
        'PORT': '5432',
        'CONN_MAX_AGE': 0,
        }
    }
'''
DATABASES = {
      'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        'OPTIONS': {
            'timeout': 20,
        },
    }
}
'''

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

CACHES = {'default': {'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
                      'LOCATION': 'unique-snowflake',
                       'TIMEOUT': None},
          'memcached': { # 'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
                        'BACKEND': 'django.core.cache.backends.memcached.PyLibMCCache',
                        'LOCATION': 'localhost:11211',
                        'TIMEOUT': None,
                        'BINARY': True,
                        'OPTIONS': {'binary': True,
                                    'behaviors': {'no_block':True,
                                                  'tcp_nodelay': True,
                                                  'tcp_keepalive': True,
                                                  'connect_timeout': 2000,
                                                  'send_timeout': 25 * 1000 * 1000,
                                                  'receive_timeout': 25 * 1000 * 1000,
                                                  '_poll_timeout': 2000,
                                                  'ketama': True,
                                                  'remove_failed': 1,
                                                  'retry_timeout': 2,
                                                  'dead_timeout': 30, }
                                    }}}

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

WORKER_THREADS = 48

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]

AUTHENTICATION_BACKENDS = (
    'django_auth_ldap.backend.LDAPBackend',
    'django.contrib.auth.backends.ModelBackend',
)

LDAP_AUTH_SETTINGS = (
    ('ldap://<LDAP server>.com'),
    'ou=ENG,ou=Users,ou=Accounts,dc=eng,dc=<domain piece>,dc=<domain piece>,dc=com'
)

AUTH_LDAP_SERVER_URI = 'ldap://<LDAP server>.com'

AUTH_LDAP_BIND_DN = "<your domain>.com"

AUTH_LDAP_BIND_PASSWORD = ""

AUTH_LDAP_USER_SEARCH = LDAPSearchUnion(
    LDAPSearch("ou=Users,ou=Accounts,dc=eng,dc=<domain piece>,dc=<domain piece>,dc=com", ldap.SCOPE_SUBTREE, "(uid=%(user)s)"))

AUTH_LDAP_USER_ATTR_MAP = {"first_name": "givenName", "last_name": "sn", "email": "mail"}

# no https
CSRF_COOKIE_SECURE = False

SESSION_COOKIE_SECURE = False

# tell the django server on which port the nginx asset server is running
NGINX_PORT = int(os.environ.get("NGINX_PORT", "8080"))

ASYNCIO_DEBUG = True

CSP_DEFAULT_SRC = ("'none'",)
CSP_STYLE_SRC = ("'self'", 'fonts.googleapis.com')
CSP_SCRIPT_SRC = ("'self'",)
CSP_FONT_SRC = ("'self'", 'fonts.gstatic.com')
CSP_IMG_SRC = ("'self'",)

CORS_ORIGIN_ALLOW_ALL = True
